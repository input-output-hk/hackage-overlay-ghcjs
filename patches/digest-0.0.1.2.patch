diff --git a/Test.hs b/Test.hs
new file mode 100644
index 0000000..d53608e
--- /dev/null
+++ b/Test.hs
@@ -0,0 +1,5 @@
+import Data.Digest.CRC32
+
+main :: IO ()
+main = do
+    print $ crc32 [1,2,3,4,5]
\ No newline at end of file
diff --git a/digest.cabal b/digest.cabal
index eaea373..223bf21 100644
--- a/digest.cabal
+++ b/digest.cabal
@@ -45,3 +45,20 @@ library
     extra-libraries: z
   else
     build-depends: zlib
+
+  if os(ghcjs)
+    js-sources: jsbits/bindings.js
+
+test-suite test
+  type:               exitcode-stdio-1.0
+  main-is:            trivial.hs
+  hs-source-dirs:     testing
+  default-language:   Haskell2010
+  build-depends:      base
+                    , bytestring
+                    , digest
+
+executable trivial
+  main-is:       Test.hs
+  build-depends: digest -any
+               , base
diff --git a/jsbits/bindings.js b/jsbits/bindings.js
new file mode 100644
index 0000000..35ea231
--- /dev/null
+++ b/jsbits/bindings.js
@@ -0,0 +1,38 @@
+// **** Start backwards compatibility ****
+
+// These functions have been copied here from rts/js/mem.js (GHC 9.10+)
+// to provide compatibility with earlier versions of GHC. They should
+// be removed here when support for GHC earlier than 9.10 is dropped.
+
+function h$digest$compat$withCBufferOnHeap(str_d, str_o, len, cont) {
+    var str = _malloc(len);
+    if(str_d !== null) h$digest$compat$copyToHeap(str_d, str_o, str, len);
+    var ret = cont(str);
+    _free(str);
+    return ret;
+}
+
+function h$digest$compat$copyToHeap(buf_d, buf_o, tgt, len) {
+    if(len === 0) return;
+    var u8 = buf_d.u8;
+    for(var i=0;i<len;i++) {
+        Module.HEAPU8[tgt+i] = u8[buf_o+i];
+    }
+}
+
+// **** End backwards compatibility ****
+
+
+// EMCC:EXPORTED_FUNCTIONS _malloc _free
+// EMCC:EXPORTED_FUNCTIONS _adler32 _crc32
+function h$adler32(adler, buf_d, buf_o, buf_len) {
+    return h$digest$compat$withCBufferOnHeap(buf_d, buf_o, buf_len, function(buf) {
+        return _adler32(adler, buf, buf_len);
+    });
+}
+
+function h$crc32(crc, buf_d, buf_o, buf_len) {
+    return h$digest$compat$withCBufferOnHeap(buf_d, buf_o, buf_len, function(buf) {
+        return _crc32(crc, buf, buf_len);
+    });
+}
\ No newline at end of file
